#include <iostream>
using namespace std;

class CanGoWrong {
public:
    CanGoWrong() {
        char* pMemory = new char[9999999999999999];
        delete [] pMemory;
    };
};

int main() {

    try {
        CanGoWrong wrong;
    }
    catch(bad_alloc& e) { // object of class bad_alloc, so catch a reference to it
        cout << "Caught exception: " << e.what() << endl;
    }

    cout << "Still running." << endl;

    return 0;
}

/*

std::exception

All exceptions generated by the standard library inherit from std::exception

logic_error
invalid_argument
domain_error
length_error
out_of_range
future_error(C++11)
bad_optional_access(C++17)
runtime_error
range_error
overflow_error
underflow_error
regex_error(C++11)
system_error(C++11)
ios_base::failure(C++11)
filesystem::filesystem_error(C++17)
tx_exception(TM TS)
nonexistent_local_time(C++20)
ambiguous_local_time(C++20)
format_error(C++20)
bad_typeid
bad_cast
bad_any_cast(C++17)
bad_weak_ptr(C++11)
bad_function_call(C++11)
bad_alloc
bad_array_new_length(C++11)
bad_exception
ios_base::failure(until C++11)
bad_variant_access(C++17)


Member functions
(constructor) 
(destructor)
operator=
what

*/